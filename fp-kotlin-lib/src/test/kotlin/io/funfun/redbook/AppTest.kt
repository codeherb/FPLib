/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.funfun.redbook

import kotlin.test.Test
import kotlin.test.assertNotNull
import io.funfun.redbook.FPList
import kotlin.system.measureTimeMillis
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class AppTest {
    @Test fun testConsList() {
        val consList = FPList(1,2,3,4)
        assertNotNull(consList)
        assertEquals(1 , (consList as? FPList.Cons)?.let { it.head })
        assertEquals(2 , ((consList as? FPList.Cons)?.tail as? FPList.Cons)?.head)
        val takedList = consList.take(3)
        assertEquals(3, takedList.length())
    }

    @Test fun testStream() {
        val streamList = Stream({1}, {2}, {3}, { 3 / 0 })
        assertNotNull(streamList)
        assertEquals(1, streamList.head())
        assertEquals(2, streamList.tail().head())
        assertEquals(3, streamList.tail().tail().head())
    }

    @Test fun testMap() {
        val consList = FPList(1,2,3,4)
        val resultList = consList.map { it + 1 }
        assertEquals(2, (resultList as? FPList.Cons)?.head)

        val resultList2 = consList.flatMap { FPList(it, it) }
        print(resultList2)
        assertEquals(1, (resultList2 as? FPList.Cons)?.head)
        assertEquals(1, ((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.head)
        assertEquals(2, (((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.head)
        assertEquals(2, ((((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.head)
    }

    @Test fun testStreamMap() {
        val originStream = Stream({1}, {2}, {3}, {4})
        val resultStream = originStream.map {
            println("@## $it")
            it + 1
        }

        assertNotNull(resultStream)
        assertEquals(2, resultStream.head())
        assertEquals(3, resultStream.tail().head())
        assertEquals(4, resultStream.tail().tail().head())
        assertEquals(5, resultStream.tail().tail().tail().head())
    }

    @Test fun testReverse() {
        val consList = FPList(1,2,3,4)
        val expectList = FPList(4,3,2,1)
        assertEquals(expectList, consList.reverse())
    }

    @Test fun testStreamFoldLeft() {
        val stream = Stream({1}, {2}, {3})
        assertEquals(6, stream.foldLeft(0) { v1, v2 ->
            v1 + v2
        })
        assertEquals(-6, stream.foldLeft(0) { v1, v2 ->
            v1 - v2
        })
    }

    @Test fun testStreamFoldRight() {
        val stream = Stream({1}, {2}, {3})
        assertEquals(6, stream.foldRight(0) { v1, v2 ->
            v1 + v2
        })
        assertEquals(2, stream.foldRight(0) { v1, v2 ->
            v1 - v2
        })
    }

    @Test fun testParallelSum() {
        println("@## measureTimeMillis1 " + measureTimeMillis { (1..500000).toList().sum() })
        println("@## measureTimeMillis2 " + measureTimeMillis { run(map2(lazyUnit { (1..100).toList() }, unit( listOf<Int>())) { a, b -> a + b })})
        assertEquals(sumD((1..100).toList()), run(sumP((1..100).toList())))
    }

    @Test fun testSortPar() {
        val target = listOf(4, 2, 5, 20, 1, 6, 11, 7, 15, 12)
        val expect = listOf(1, 2, 4, 5, 6, 7, 11, 12, 15, 20)
        assertEquals(expect, run(sortPar(lazyUnit { target })))
    }

    @Test fun testSafeDiv() {
        val target = safeDiv(4, 2).map { it + 1 }.orElse { Either.Left(-1) }
        assertTrue { target is Either.Right }
        val target2 = safeDiv(5, 0).map { it + 1 }
        assertTrue { target2 is Either.Left }
    }

    @Test fun testOptions() {
        val target = Option.Some(3).filter { false }
        assertTrue { target is Option.None }
        val target2 = Option.Some(3).map { it + 1 }.getOrElse { -1 }
        assertEquals(4, target2)
    }
}
