/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.funfun.redbook

import kotlin.test.Test
import kotlin.test.assertNotNull
import io.funfun.redbook.FPList
import kotlin.test.assertEquals

class AppTest {
    @Test fun testConsList() {
        val consList = FPList(1,2,3,4)
        assertNotNull(consList)
        assertEquals(1 , (consList as? FPList.Cons)?.let { it.head })
        assertEquals(2 , ((consList as? FPList.Cons)?.tail as? FPList.Cons)?.head)
    }

    @Test fun testStream() {
        val streamList = Stream({1}, {2}, {3}, { 3 / 0 })
        assertNotNull(streamList)
        assertEquals(1, streamList.head())
        assertEquals(2, streamList.tail().head())
        assertEquals(3, streamList.tail().tail().head())
    }

    @Test fun testMap() {
        val consList = FPList(1,2,3,4)
        val resultList = consList.map { it + 1 }
        assertEquals(2, (resultList as? FPList.Cons)?.head)

        val resultList2 = consList.flatMap { FPList(it, it) }
        print(resultList2)
        assertEquals(1, (resultList2 as? FPList.Cons)?.head)
        assertEquals(1, ((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.head)
        assertEquals(2, (((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.head)
        assertEquals(2, ((((resultList2 as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.tail as? FPList.Cons)?.head)
    }

    @Test fun testReverse() {
        val consList = FPList(1,2,3,4)
        val expectList = FPList(4,3,2,1)
        assertEquals(expectList, consList.reverse())
    }

//    @Test fun testParallelSum() {
//        assertEquals((1..100).sum(), sum((1..100).toList()))
//    }
}
